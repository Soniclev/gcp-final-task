steps:

  # Docker Build
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t',
           'europe-central2-docker.pkg.dev/${PROJECT_ID}/gcp-final-task/gcp:${SHORT_SHA}', '.']

  # Test the built image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['run', '--rm',
           'europe-central2-docker.pkg.dev/${PROJECT_ID}/gcp-final-task/gcp:${SHORT_SHA}', 'poetry', 'run', 'pytest']

  # Docker push to Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push',  'europe-central2-docker.pkg.dev/${PROJECT_ID}/gcp-final-task/gcp:${SHORT_SHA}']

  # deploy container image to GKE
  - name: "gcr.io/cloud-builders/gke-deploy"
    args:
      - run
      - --filename=./kuber/pod.yaml
      - --image=europe-central2-docker.pkg.dev/${PROJECT_ID}/gcp-final-task/gcp:${SHORT_SHA}
      - --location=europe-central2-c
      - --cluster=gcp-cluster

  # Create an image for migration
  - name: "gcr.io/cloud-builders/docker"
    entrypoint: /bin/bash
    args:
      - '-c'
      - |
        echo "FROM $_IMAGE_NAME
        COPY --from=gcr.io/cloudsql-docker/gce-proxy /cloud_sql_proxy /cloudsql/cloud_sql_proxy" > Dockerfile-proxy;

        docker build -f Dockerfile-proxy -t migrator .

  # Execute migration
  - name: "migrator"
    dir: sql-proxy
    secretEnv:
      - DATABASE
    entrypoint: /bin/bash
    args:
      - '-c'
      - |
        /cloudsql/cloud_sql_proxy -instances=${_INSTANCE_CONNECTION_NAME}=tcp:${_DATABASE_PORT} & sleep 5;
        poetry run python3 -m alembic upgrade head

# Store images in Google Artifact Registry
images:
  - europe-central2-docker.pkg.dev/${PROJECT_ID}/gcp-final-task/gcp:${SHORT_SHA}

options:
  dynamic_substitutions: true

substitutions:
  _INSTANCE_CONNECTION_NAME: ${PROJECT_ID}:europe-central2:gcp-db
  _DATABASE_PORT: '5432'
  _IMAGE_NAME: europe-central2-docker.pkg.dev/${PROJECT_ID}/gcp-final-task/gcp:${SHORT_SHA}

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/db-migrator-public-connect/versions/latest
      env: DATABASE
